package com.springboot.webservices.restful_web_services.user;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.springboot.webservices.restful_web_services.jpa.UserRepository;

import jakarta.validation.Valid;

@RestController
public class UserJpaResource {
	
	private UserDaoService userDaoService;
	
	private UserRepository userRepository;
	
	
	public UserJpaResource(UserDaoService userDaoService, UserRepository userRepository) {
		this.userDaoService = userDaoService;
		this.userRepository = userRepository;
	}
	// GET  /users
	
	@GetMapping("/jpa/users")
	public List<User> retriveAllUsers(){
		return userRepository.findAll();
	}
	
	
	
	@GetMapping("/jpa/users/{userId}")
	public EntityModel<User> findOne(@PathVariable Integer userId){
		 Optional<User> user = userRepository.findById(userId);
		 
		 if(user.isEmpty()) {
			 throw new UserNotFoundException("id : "+userId);
		 }
		 
		 EntityModel<User> entityModel = EntityModel.of(user.get());
		 WebMvcLinkBuilder link = linkTo(methodOn(this.getClass()).retriveAllUsers());
		 entityModel.add(link.withRel("all-users"));
		 return entityModel;
	}
	
	@DeleteMapping("/jpa/users/{userId}")
	public void deleteUser(@PathVariable Integer userId){
		userRepository.deleteById(userId);
	}
	
	@PostMapping("/jpa/users")
	public ResponseEntity<User> createUser(@Valid  @RequestBody User user){
		User savedUser = userDaoService.save(user);
		
		URI location =  ServletUriComponentsBuilder
				.fromCurrentRequest()
				.path("/{id}")
				.buildAndExpand(savedUser.getId())
				.toUri();
		return ResponseEntity.created(location).build();
	}
}
